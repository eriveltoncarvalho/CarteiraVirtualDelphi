unit uMovimentacaoModel;

interface

uses
  Dialogs, MyAccess, System.SysUtils,  System.StrUtils;

type

  TMovimentacao = class
  private
   // atributos da classe
    Foperacao: string;
    Fobservacao: string;
    Fvalor: double;
    Fdata_cadastro: TDateTime;
    FCPF: integer;
    Fid: integer;
    Fid_carteiras: integer;
    Fsaldo: double;
    FConexaoBanco: TMyConnection;
    FqrySQL: TMyQuery;
    Ffilter: string;

  public
    // métodos públicos da classe
    constructor Create;
    destructor  Destroy; override;
    procedure Salvar(const objetoMovimentacao: TMovimentacao);
    procedure GetSaldo(const objetoMovimentacao: TMovimentacao);
    procedure Buscar(const objetoMovimentacao: TMovimentacao);

    // propriedades da classe
    property id: integer read Fid write Fid;
    property id_carteiras: integer read Fid_carteiras write Fid_carteiras;
    property id_categorias: integer read FCPF write FCPF;
    property data_cadastro: TDateTime read Fdata_cadastro write Fdata_cadastro;
    property operacao: string read Foperacao write Foperacao;
    property valor: double read Fvalor write Fvalor;
    property saldo: double read Fsaldo write Fsaldo;
    property observacao: string read Fobservacao write Fobservacao;
    property ConexaoBanco:TMyConnection read FConexaoBanco;
    property qrySQL:TMyQuery read FqrySQL write FqrySQL;
    property filter:string read Ffilter write Ffilter;
  end;

implementation

uses
   uConexaoBanco;

{ TMovimentacao }

procedure TMovimentacao.Buscar(const objetoMovimentacao: TMovimentacao);
begin
  Self.qrySQL := TMyQuery.Create(nil);
  Self.qrySQL.Connection:= FConexaoBanco;
  Self.qrySQL.SQL.Add(' select mv.*,cr.nome as carteira,ct.nome as categoria from movimentacoes as mv '+
                      '                                                inner join categorias as ct on ct.id=mv.id_categorias '+
                      '                                                inner join carteiras as cr on cr.id=mv.id_carteiras '+
                      '   where id_carteiras='+IntToStr(objetoMovimentacao.id_carteiras)+ objetoMovimentacao.filter);
  Self.qrySQL.Open;
end;

constructor TMovimentacao.Create;
 var ConexaoBanco : TConexaoBanco;
begin
  //criando a conexão com o banco
  ConexaoBanco := TConexaoBanco.Create;
  FConexaoBanco := ConexaoBanco.GetConexao;
end;

destructor TMovimentacao.Destroy;
begin
  inherited;
  FConexaoBanco.Free;
end;

procedure TMovimentacao.GetSaldo(const objetoMovimentacao: TMovimentacao);
var qry : TMyQuery;
begin
   try
     qry := TMyQuery.Create(nil);
     qry.Connection:= FConexaoBanco;
     qry.SQL.Add('select saldo from movimentacoes where id_carteiras='+IntToStr(objetoMovimentacao.id_carteiras)+' order by id desc limit 1');
     qry.Open;

     Self.saldo := qry.FieldByName('saldo').AsFloat;

   finally
     FreeAndNil(qry);
   end;

end;

procedure TMovimentacao.Salvar(const objetoMovimentacao: TMovimentacao);
 var Qry : TMyQuery;
begin
    try
      Qry := TMyQuery.Create(nil);
      qry.Connection:= FConexaoBanco;
      qry.SQL.Add('INSERT INTO movimentacoes (id_carteiras, id_categorias,'+
                  ' data_cadastro, operacao, valor, saldo, observacao) VALUES('+
                  IntToStr(objetoMovimentacao.id_carteiras)+','+
                  IntToStr(objetoMovimentacao.id_categorias)+','+
                  ('current_timestamp')+','+
                  QuotedStr(objetoMovimentacao.operacao)+','+
                  AnsiReplaceStr(FloatToStr(objetoMovimentacao.valor),',','.')+','+
                  AnsiReplaceStr(FloatToStr(objetoMovimentacao.saldo),',','.')+','+
                  QuotedStr(objetoMovimentacao.observacao)+')');
      Qry.ExecSQL;
    finally

     FreeAndNil(Qry);
    end;


end;

end.
